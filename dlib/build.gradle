apply plugin: 'com.android.library'

group = "com.nishan.hello_nini_chat"

android {
    compileSdkVersion 28
    buildToolsVersion '27.0.3'
    defaultConfig {
        minSdkVersion 24
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"

        ndk {
            abiFilters 'arm64-v8a'
        }

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["androidManifestFile": "D:\\HelloNini\\dlib\\src\\main\\AndroidManifest.xml"]
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    android {
        lintOptions {
            abortOnError false
        }
    }
    // Use prebilt *.so. Don't run ndk-build
    sourceSets {
        main {
            jniLibs.srcDirs = ["src/main/jniLibs"]
        }
    }
    productFlavors {
    }
}

configurations {
    javadocDeps
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support:appcompat-v7:28.0.0-alpha3'
    javadocDeps "com.android.support:appcompat-v7:28.0.0-alpha3"
    implementation 'com.android.support:support-annotations:26.0.0-alpha1'
    javadocDeps "com.android.support:support-annotations:26.0.0-alpha1"
    annotationProcessor "org.androidannotations:androidannotations:4.0.0"
    implementation "org.androidannotations:androidannotations-api:4.0.0"
}

buildscript {
    repositories {
       // mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath 'com.jakewharton.hugo:hugo-plugin:1.2.1'
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.3"
        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.4.1'

    }
}
apply plugin: 'com.jakewharton.hugo'


// call regular ndk-build(.cmd) script from app directory
def GetNDKDir()  {
    def localProperties = new Properties()

    def NDK_SEARCH_VARS = ['ANDROID_NDK_HOME', 'ANDROID_NDK_ROOT', 'NDKROOT', 'NDKHOME']
    def ndk_path = null

    def lim = (Os.isFamily(Os.FAMILY_WINDOWS)) ? '\\' : '/'

    // Search Local.Properties file
    try {
        localProperties.load(project.rootProject.file('local.properties').newDataInputStream())
        def ndkDir = localProperties.getProperty('ndk.dir')
        ndk_path = ndkDir != null ? ndkDir + lim : null;
    } catch (java.io.FileNotFoundException e) {
        println 'local.properties file not found'
    }

    // Search env var
    if (ndk_path == null){
        for (String var : NDK_SEARCH_VARS) {
            def v = System.getenv(var)

            if (v != null) {
                ndk_path = v + lim
                println "found in System Environment *$var = " + ndk_path
                break
            }
        }
    } else {
        println 'found in local.properties *NDK_PATH = ' + ndk_path
    }

    if (ndk_path == null) {
        println 'No NDK_PATH found'
        ndk_path = ''
    }
    return ndk_path
}

def NDKCommand() {
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        return GetNDKDir() + "ndk-build.cmd"
    } else {
        return GetNDKDir() + "ndk-build"
    }
}

apply plugin: 'com.jfrog.bintray'
apply plugin: 'com.github.dcendents.android-maven'




task generateSourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier 'sources'
}

task generateJavadocs(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath()
            .join(File.pathSeparator))
    classpath += configurations.javadocDeps
}

task generateJavadocsJar(type: Jar) {
    from generateJavadocs.destinationDir
    classifier 'javadoc'
}
generateJavadocsJar.dependsOn generateJavadocs

artifacts {
    archives generateJavadocsJar
    archives generateSourcesJar
}

Properties properties = new Properties()
if(project.rootProject.file('local.properties').isFile()) {
    properties.load(project.rootProject.file('local.properties').newDataInputStream())

    bintray {
        user = properties.getProperty("bintray.user")
        key = properties.getProperty("bintray.apikey")

        configurations = ['archives']
        pkg {
            repo = "maven"
            name = "emotionapp"
            version {
                name = "1.0"
                desc = 'An Android library to wrap dlib library'
                released  = new Date()
                vcsTag = "1.0"
            }

        }
        configurations = ['archives']
    }
}